Why do we need Dependency Injection?
  -DI is the concept of Inversion of Control. WHich says that a class should
  get its dependencies from outside. In simple words, no class should instantiate
  another class but should get the instances from a configuration class.

  -If a Java class creates an instance of another class via the new operator
  it cannot be used and tested independently from that class and is called
  a hard dependency.

What are the benefits of providing the dependencies from outside the class?
  The most important advantage is that it increases the possibility of
  reusing the class and to be able to test them independently of other classes.

Annotation Processor :
  Is a way to read the compiled files during build time to generate source code
  files to be used in the project.



1. Dependency provider: Classes annotated with @Module are responsible for
providing objects which can be injected. Such classes define methods
annotated with @Provides. The returned objects from these methods are available
for dependency injection.

2. Dependency consumer: The @Inject annotation is used to define a dependency

3. Connecting consumer and producer: A @Component annotated interface defines
the connection between the provider of objects (module) and the objects which express
a dependency. The class for this connection is generated by Dagger.


A Module is a collection of dependencies.
This is the objects that you need to inject into your app


A component is the glue between the provide methods and the inject fields
It actually does the wiring, it is what sets the class members to the provide methods.
It is an interface because it generates code at compile time.
